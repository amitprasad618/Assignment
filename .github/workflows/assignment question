#include<bits/stdc++.h>

using namespace std;

int find(vector<int>& parent, int x) {
    if (parent[x] != x) {
        parent[x] = find(parent, parent[x]);
    }
    return parent[x];
}

void Union(vector<int>& parent, int x, int y) {
    int rootX = find(parent, x);
    int rootY = find(parent, y);
    if (rootX != rootY) {
        parent[rootY] = rootX;
    }
}

int minCableMoves(int n, vector<vector<int>>& connections) {
    vector<int> parent(n);
    for (int i = 0; i < n; ++i) {
        parent[i] = i;
    }
    
    int components = n;
    for (const auto& connection : connections) {
        int rootA = find(parent, connection[0]);
        int rootB = find(parent, connection[1]);
        if (rootA != rootB) {
            Union(parent, connection[0], connection[1]);
            components--;
        }
    }
    
    if (components == 1) {
        return 0;
    }
    
    int extraCables = connections.size() - (n - components);
    if (extraCables >= components - 1) {
        return components - 1;
    } else {
        return -1;
    }
}

int main() {
     int n = 4;
    vector<vector<int>> connections = {{0, 1}, {0, 2}, {1, 2}};
    cout << "Output is: " << minCableMoves(n, connections) << endl; 
    
    return 0;
}
